AWSTemplateFormatVersion: 2010-09-09
Parameters:
  #ssh to the EC2 instance
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x
  #db login
  DBUsername:
    NoEcho: 'true'
    Description: Username for database access
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: Must begin with a letter and contain only alphanumeric characters.
  DBPassword:
    NoEcho: 'true'
    Description: Password for database access
    Type: String
    MinLength: '8'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]*'
  #launch template data
  LatestAmiId:
    Description: Region specific image from the Parameter Store
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
  InstanceType:
    Description: Amazon EC2 instance type for the instances
    Type: String
    AllowedValues:
      - t3.micro
      - t3.small
      - t3.medium
    Default: t3.micro

Resources:
  # Vpc
  vpc-bookstore:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'

  # Public Subnets
  public-subnet-1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: "us-east-1a"
      MapPublicIpOnLaunch: true
      VpcId: !Ref vpc-bookstore
      CidrBlock: 10.0.0.0/24
      Tags:
        - Key: Name
          Value: public-subnet-1

  public-subnet-2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: "us-east-1b"
      MapPublicIpOnLaunch: true
      VpcId: !Ref vpc-bookstore
      CidrBlock: 10.0.20.0/24
      Tags:
        - Key: Name
          Value: public-subnet-2

  # Internet gateway
  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    DependsOn: vpc-bookstore
  VPCGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId: !Ref vpc-bookstore
      InternetGatewayId: !Ref "InternetGateway"

  # Route tables
  #public
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref vpc-bookstore
      Tags:
        - Key: Name
          Value: Public
  PublicRoute1: # the public route table routes directly to the IGW:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Route table associated with subnets
  # Attach the public subnets to public route tables.
  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref public-subnet-1
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref public-subnet-2
      RouteTableId: !Ref PublicRouteTable

  # EC2 Security Group
  EC2SecurityGroup:
    DependsOn: vpc-bookstore
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: security group ec2 allowing http and ssh
      VpcId:
        Ref: vpc-bookstore
      SecurityGroupEgress:
        - Description: Allow all outbound traffic
          IpProtocol: "-1"
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId:
            Fn::GetAtt:
              - ALBSecurityGroup
              - GroupId
        - IpProtocol: tcp  #ssh configured to your IP
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHLocation

  # EC2 Instances
  ec2-bookstore-A:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: ami-0d5eff06f840b45e9
      InstanceType: t2.micro
      KeyName: vockey
      UserData:
        Fn::Base64:
          !Sub |
          #!/bin/bash
          yum update -y
          yum install -y httpd.x86_64
          systemctl start httpd.service
          systemctl enable httpd.service
          echo ?Hello World from $(hostname -f)? > /var/www/html/index.html
          sudo yum update -y
          sudo amazon-linux-extras install docker
          sudo service docker start
          sudo usermod -a -G docker ec2-user
          sudo chkconfig docker on
      SubnetId: !Ref public-subnet-1
      SecurityGroupIds:
        - !Ref EC2SecurityGroup
      Tags:
        - Key: Name
          Value: ec2-bookstore-A
  MyEIP:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref ec2-bookstore-A

  ec2-bookstore-B:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: ami-0d5eff06f840b45e9
      InstanceType: t2.micro
      KeyName: vockey
      UserData:
        Fn::Base64:
          !Sub |
          #!/bin/bash
          yum update -y
          yum install -y httpd.x86_64
          systemctl start httpd.service
          systemctl enable httpd.service
          echo ?Hello World from $(hostname -f)? > /var/www/html/index.html
          sudo yum update -y
          sudo amazon-linux-extras install docker
          sudo service docker start
          sudo usermod -a -G docker ec2-user
          sudo chkconfig docker on
      SubnetId: !Ref public-subnet-2
      SecurityGroupIds:
        - !Ref EC2SecurityGroup
      Tags:
        - Key: Name
          Value: ec2-bookstore-B
  MyEIP2:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref ec2-bookstore-B

  # Application Load Balancer (ALB)
  # It's a layer 7 (application layer) load balancer. Ideal for HTTP/HTTPS traffic and microservices architectures.

  # ALB Security Group
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: ALB-SG
      GroupDescription: ALB Security Group
      VpcId: !Ref vpc-bookstore
      SecurityGroupEgress:
        - Description: Allow all outbound traffic
          IpProtocol: "-1"
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: tcp   #HTTP open to world
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  # The ALB itself
  MyLoadBalancer:
    DependsOn: VPCGatewayAttachment
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: ALB
      Scheme: internet-facing
      Type: application
      Subnets:
        - !Ref public-subnet-1
        - !Ref public-subnet-2
      SecurityGroups:
        - !Ref ALBSecurityGroup

  # ALB listener
  # Defines the protocol/port combination that the ALB listens on for incoming requests.
  # It checks for connection requests from clients using the configured protocol and port.
  # Based on the rules you define, it forwards requests to one or more target groups.
  # Each ALB requires at least one listener to accept traffic.
  HTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref MyLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Order: 1
          TargetGroupArn: !Ref EC2TargetGroup
          Type: forward

  # ALB target group
  # Is used to route requests to one or more registered targets (in this case EC2 instances).
  # It acts as a logical grouping of targets. The ALB continually monitors the health of registered targets.
  # Requests are routed to healthy targets within the target group.
  EC2TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 15
      HealthyThresholdCount: 5
      Matcher:
        HttpCode: '200'
      Name: EC2TargetGroup
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '30'
      Targets:
        - Id: !Ref ec2-bookstore-A
          Port: 80
        - Id: !Ref ec2-bookstore-B
          Port: 80
      UnhealthyThresholdCount: 3
      VpcId: !Ref vpc-bookstore

  #################################
  # This CF template defines 2 EC2 instances in two AZs with an ALB. This setup provides high AVAILABILITY as
  # traffic can be directed to a single instance in case there's a problem with the other instance or AZ.
  # However, this setup does NOT provide high SCALABILITY. The scalable alternative would be to define an
  # Auto Scaling Group (ASG). ASGs dynamically adjust the number of instances based on demand. If traffic increases,
  # it launches more instances; if demand decreases, it terminates instances.
  # ASGs require a launch template (or launch configuration), which describes the configuration for the EC2 instances.
  # The snippet below defines a LaunchTemplate and an ASG. However, the ASG is not a target of the ALB, so it's not
  # used. The ASG has minSize 0 so it won't launch any EC2 instances when the CF stack is created.
  #
  # If you have time, feel free to alter your CF template to use the ASG instead of the two EC2 instances. YOu'll
  # have to add the ASG as a target of the ALB.

  # Launch template
  MyLaunchTemplate:
    Type: 'AWS::EC2::LaunchTemplate'
    Properties:
      LaunchTemplateName: !Sub '${AWS::StackName}-launch-template-for-auto-scaling'
      LaunchTemplateData:
        UserData:
          Fn::Base64:
            !Sub |
            #!/bin/bash
            yum update -y
            yum install -y httpd.x86_64
            systemctl start httpd.service
            systemctl enable httpd.service
            echo ?Hello World from $(hostname -f)? > /var/www/html/index.html
            sudo yum update -y
            sudo amazon-linux-extras install docker
            sudo service docker start
            sudo usermod -a -G docker ec2-user
            sudo chkconfig docker on
        NetworkInterfaces:
          - DeviceIndex: 0
            AssociatePublicIpAddress: true
            Groups:
              - !Ref EC2SecurityGroup
            DeleteOnTermination: true
        Placement:
          Tenancy: default
        ImageId: !Ref LatestAmiId
        InstanceType: !Ref InstanceType
        KeyName: vockey

  # The ASG itself
  myASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref MyLaunchTemplate
        Version: !GetAtt MyLaunchTemplate.LatestVersionNumber
      MaxSize: '2'
      MinSize: '0'
      DesiredCapacity: '0'
      VPCZoneIdentifier:
        - !Ref public-subnet-1
        - !Ref public-subnet-2

  # End of ASG definition
  #################################

  # Database
  # db subnets
  DB-subnet-1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId:
        Ref: vpc-bookstore
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: us-east-1a
      Tags:
        - Key: name
          Value: DB-subnet-1
  DB-subnet-2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId:
        Ref: vpc-bookstore
      CidrBlock: 10.0.5.0/24
      AvailabilityZone: us-east-1b
      Tags:
        - Key: name
          Value: DB-subnet-2

  # Subnet group
  MyDBSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupDescription: description
      SubnetIds:
        - Ref: DB-subnet-1
        - Ref: DB-subnet-2

  # DB Security group
  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: EC2SecurityGroup
    Properties:
      VpcId:
        Ref: vpc-bookstore
      GroupDescription: Open database for access
      SecurityGroupEgress:
        - Description: Allow all outbound traffic
          IpProtocol: "-1"
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: tcp  # port 3306 opened to the ec2 instances.
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId:
            Ref: EC2SecurityGroup

  # RDS Aurora cluster
  # By declaring two DB instances in the cluster, Aurora will make the 1st instance the primary and the second the
  # replica, and will manage the primary/replica roles automatically from then on.
  dbcluster-aurora-bookstore-dev:
    Type: AWS::RDS::DBCluster
    Properties:
      Engine: aurora-mysql
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      BackupRetentionPeriod: '7'
      PreferredBackupWindow: 01:00-02:00
      PreferredMaintenanceWindow: mon:03:00-mon:04:00
      DBSubnetGroupName: !Ref MyDBSubnetGroup
      VpcSecurityGroupIds:
        - !Ref DBSecurityGroup
      StorageEncrypted: true

  db-aurora-dev-A:
    Type: AWS::RDS::DBInstance
    Properties:
      Engine: aurora-mysql
      DBClusterIdentifier: !Ref dbcluster-aurora-bookstore-dev
      DBInstanceClass: db.t3.small
      DBSubnetGroupName: !Ref "MyDBSubnetGroup"
      PubliclyAccessible: false

  db-aurora-dev-B:
    Type: AWS::RDS::DBInstance
    Properties:
      Engine: aurora-mysql
      DBClusterIdentifier: !Ref dbcluster-aurora-bookstore-dev
      DBInstanceClass: db.t3.small
      DBSubnetGroupName: !Ref "MyDBSubnetGroup"
      PubliclyAccessible: false
        

