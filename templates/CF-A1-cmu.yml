AWSTemplateFormatVersion: 2010-09-09

Parameters:

  VpcName:
    Description: 'Give a short name for your VPC. It will be used as a prefix in the name of other resources.'
    Type: String
    NoEcho: false

  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x

  DBUsername:
    Description: Username for database access
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: Must begin with a letter and contain only alphanumeric characters.

  DBPassword:
    NoEcho: 'true'
    Description: Password for database access
    Type: String
    MinLength: '8'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]*'


Resources:

  # VPC
  # It's a virtual private network where within you launch resources you'll manage.
  # There are 1+ subnets defined in a VPC. Each subnet is a range of IP addresses and is limited to a single AZ.
  # Reference: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-vpc.html
  VpcBookstore:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
        - Key: Name
          Value: !Sub '${VpcName}-${AWS::StackName}'

  # Public subnets for EC2 instances. Each subnet is in a different availability zone (AZ).
  # Reference: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnet.html
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: "us-east-1a"
      MapPublicIpOnLaunch: true
      VpcId: !Ref VpcBookstore
      CidrBlock: 10.0.0.0/24
      Tags:
        - Key: Name
          Value: !Sub "${VpcName}-PublicSubnet1"
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: "us-east-1b"
      MapPublicIpOnLaunch: true
      VpcId: !Ref VpcBookstore
      CidrBlock: 10.0.20.0/24
      Tags:
        - Key: Name
          Value: !Sub "${VpcName}-PublicSubnet2"

  # Private subnets for the RDS database instances
  # They become elements of a DBSubnetGroup that is used in the DB configuration.
  DBSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId:
        Ref: VpcBookstore
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select [ 0, !GetAZs "" ]
      Tags:
        - Key: name
          Value: !Sub "${VpcName}-DBSubnet1"
  DBSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId:
        Ref: VpcBookstore
      CidrBlock: 10.0.5.0/24
      AvailabilityZone: !Select [ 1, !GetAZs "" ]
      Tags:
        - Key: name
          Value: !Sub "${VpcName}-DBSubnet2"

  # DB Subnet group
  # It defines the subnets where RDS DB instances will reside. Each subnet should be in a separate AZ.
  # DB instances will run in the subnets specified by this DBSubnetGroup. We select subnets from different AZs for high availability.
  # Reference: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-rds-dbsubnetgroup.html
  MyDBSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupName: !Sub "${VpcName}-MyDBSubnetGroup"
      DBSubnetGroupDescription: Multi-AZ subnet group for RDS instances
      SubnetIds:
        - Ref: DBSubnet1
        - Ref: DBSubnet2

  # Internet gateway
  # It enables the communication between the VPC and the public Internet. It provides routing and NAT services.
  # A public subnet needs an Internet Gateway. Between IPs in a subnet and an Internet gateway we need route tables.
  # Reference: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-internetgateway.html
  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    DependsOn: VpcBookstore
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${VpcName}-IGW"
  VPCGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId: !Ref VpcBookstore
      InternetGatewayId: !Ref "InternetGateway"


  # Route tables + routes + subnet-route associations.
  # The route we need is: PublicSubnet12 --> PUBLIC ROUTE --> Internet Gateway
  # Reference: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-route.html

  # PUBLIC ROUTE
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VpcBookstore
      Tags:
        - Key: Name
          Value: !Sub "${VpcName}-PublicRouteTable"
  # The public route table routes directly to the Internet Gateway
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  # Route table associated with subnets. Attaches the public subnets to the public route table.
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  # SECURITY GROUPS
  # A security group defines what inbound and outbound traffic is allowed.
  # Allowed traffic is specified in terms of protocols, ports and IP ranges.
  # Reference: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-securitygroup.html

  # Security Group for the Application Load Balancer (ALB)
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${VpcName}-ALBSecurityGroup"
      GroupDescription: ALB Security Group allowing HTTP(S) from anywhere
      VpcId: !Ref VpcBookstore
      Tags:
        - Key: Name
          Value: !Sub "${VpcName}-ALBSecurityGroup"
      SecurityGroupIngress:
        - Description: HTTP open to the world
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - Description: HTTPS open to the world
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - Description: Allow all outbound traffic
          IpProtocol: "-1"
          CidrIp: 0.0.0.0/0

  # EC2 Security Group
  EC2SecurityGroup:
    DependsOn: ALBSecurityGroup
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: !Sub "${VpcName}-EC2SecurityGroup"
      GroupDescription: Security group for EC2 instances allowing http and ssh
      VpcId: !Ref VpcBookstore
      Tags:
        - Key: Name
          Value: !Sub "${VpcName}-EC2SecurityGroup"
      SecurityGroupIngress:
        - Description: Allow inbound SSH traffic from IPs specified when creating the stack
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHLocation
        - Description: Allow HTTP traffic from the ALB
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId:
            Fn::GetAtt:
              - ALBSecurityGroup
              - GroupId
      SecurityGroupEgress:
        - Description: Allow all outbound traffic
          IpProtocol: "-1"  # ALL
          CidrIp: 0.0.0.0/0

  # DB Security group
  # Port 3306 is the default TCP port used by MySQL databases.
  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: EC2SecurityGroup
    Properties:
      GroupName: !Sub "${VpcName}-DBSecurityGroup"
      GroupDescription: Open database for access from EC2 instances
      VpcId: !Ref VpcBookstore
      Tags:
        - Key: Name
          Value: !Sub "${VpcName}-DBSecurityGroup"
      SecurityGroupIngress:
        - Description: Port 3306 open to the EC2 instances.
          IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId:
            Ref: EC2SecurityGroup
      SecurityGroupEgress:
        - Description: Allow all outbound traffic
          IpProtocol: "-1"
          CidrIp: 0.0.0.0/0


  # EC2 Instances
  # An EC2 instance launched in a VPC has a private IPv4 address and may have a public IP address (Elastic IP).
  # Upon initialization the EC2 instance installs and runs docker. On your own template, you may add the 
  # instructions to pull and run your service docker images. 
  # Reference: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-instance.html
  EC2BookstoreA:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: ami-053a45fff0a704a47
      InstanceType: t3.micro
      KeyName: vockey
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          # Update package manager (sudo not needed in UserData for EC2 creation)
          yum update -y

          # Install and start docker
          yum install -y docker
          service docker start
          # Add ec2 user to docker group
          usermod -a -G docker ec2-user
          # Enable docker to start automatically
          systemctl enable docker

      SubnetId: !Ref PublicSubnet1
      SecurityGroupIds:
        - !Ref EC2SecurityGroup
      Tags:
        - Key: Name
          Value: !Sub "${VpcName}-EC2BookstoreA"
  ElasticIPA:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref EC2BookstoreA

  EC2BookstoreB:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: ami-053a45fff0a704a47
      InstanceType: t3.micro
      KeyName: vockey
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          # Update package manager (sudo not needed in UserData for EC2 creation)
          yum update -y

          # Install and start docker
          yum install -y docker
          service docker start
          # Add ec2 user to docker group
          usermod -a -G docker ec2-user
          # Enable docker to start automatically
          systemctl enable docker

      SubnetId: !Ref PublicSubnet2
      SecurityGroupIds:
        - !Ref EC2SecurityGroup
      Tags:
        - Key: Name
          Value: !Sub "${VpcName}-EC2BookstoreB"
  ElasticIPB:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref EC2BookstoreB


  # Application Load Balancer (ALB)
  # It's a layer 7 (application layer) load balancer. Ideal for HTTP/HTTPS traffic.
  # Reference: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-loadbalancer.html

  # The ALB itself for Internet facing traffic
  ALB:
    DependsOn: VPCGatewayAttachment
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub "${VpcName}-ALB"
      Scheme: internet-facing
      Type: application
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub "${VpcName}-ALB"

  # ALB listener
  # Defines the protocol/port combination that the ALB listens on for incoming requests.
  # It checks for connection requests from clients using the configured protocol and port.
  # Based on the rules you define, it forwards requests to one or more target groups.
  # Each ALB requires at least one listener to accept traffic.
  # Reference: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-listener.html
  HTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Order: 1
          TargetGroupArn: !Ref EC2TargetGroup
          Type: forward

  # ALB target group
  # Is used to route requests to one or more registered targets (in this case EC2 instances).
  # It acts as a logical grouping of targets. The ALB continually monitors the health of registered targets.
  # Requests are routed to healthy targets within the target group.
  # Reference: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-targetgroup.html
  EC2TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: EC2TargetGroup
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '30'
      Targets:
        - Id: !Ref EC2BookstoreA
          Port: 80
        - Id: !Ref EC2BookstoreB
          Port: 80
      VpcId: !Ref VpcBookstore
      HealthCheckProtocol: HTTP                # ALB Health Check is an example of the ping-echo tactic
      HealthCheckPath: "/status"
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 15
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 3
      Matcher:
        HttpCode: '200'
      Tags:
        - Key: Name
          Value: !Sub "${VpcName}-EC2TargetGroup"


  # RDS Aurora cluster
  # By declaring two DB instances in the cluster, Aurora will make the 1st instance the primary and the second the
  # replica, and will manage the primary/replica roles automatically from then on.
  #
  # You may use aurora-postgresql instead of aurora-mysql (in that case, traffic is through port 5432 by default).
  # Postgres has more advanced features suitable for large scale workloads; MySQL is simpler to configure and suitable for smaller-scale apps.
  #
  # Amazon Linux 2023 (used for the EC2 instances in this CF template) does not offer the mysql package in its package
  # repository anymore. Instead, you can use MariaDB, which is compatible with MySQL:
  #   sudo dnf install mariadb105-server -y
  #   mysql -h <writer_instance_endpoint> -u <username> -p
  #
  # Reference: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-rds-dbcluster.html
  DBClusterAuroraBookstore:
    Type: AWS::RDS::DBCluster
    Properties:
      DBClusterIdentifier: bookstore-db-dev
      Engine: aurora-mysql
      Port: 3306
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      VpcSecurityGroupIds:
        - !Ref DBSecurityGroup
      DBSubnetGroupName: !Ref MyDBSubnetGroup
      StorageEncrypted: true
      BackupRetentionPeriod: '1'
      PreferredBackupWindow: 01:00-02:00
      PreferredMaintenanceWindow: mon:03:00-mon:04:00

  # For security, PubliclyAccessible should be false (especially for production).
  # Constraints regarding DB version and DBInstanceClass: https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Concepts.DBInstanceClass.SupportAurora.html
  # Reference: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-rds-dbinstance.html
  DBAuroraA:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: bookstore-db-dev-instance1
      Engine: aurora-mysql
      DBClusterIdentifier: !Ref DBClusterAuroraBookstore
      DBInstanceClass: db.t3.medium
      DBSubnetGroupName: !Ref MyDBSubnetGroup
      PubliclyAccessible: false
  DBAuroraB:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: bookstore-db-dev-instance2
      Engine: aurora-mysql
      DBClusterIdentifier: !Ref DBClusterAuroraBookstore
      DBInstanceClass: db.t3.medium
      DBSubnetGroupName: !Ref MyDBSubnetGroup
      PubliclyAccessible: false
