AWSTemplateFormatVersion: 2010-09-09
Parameters:
  LabRoleARN:
    Type: String
    Description: Enter the ARN for LabRole (IAM | Roles | click on LabRole | copy ARN)
    #  RDSInstanceName:
    #    Type: String
    #  RDSDBName:
    #    Type: String
    #  RDSDBUsername:
    #    Type: String
    #  RDSDBPassword:
    #    Type: String

  # Database credentials
  DBUsername:
    NoEcho: 'true'
    Description: Username for database access
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: Must begin with a letter and contain only alphanumeric characters.
  DBPassword:
    NoEcho: 'true'
    Description: Password for database access
    Type: String
    MinLength: '8'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]*'


Resources:
  ##networking
  BookStoreVpc:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true

  PublicSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref BookStoreVpc
      AvailabilityZone: !Select [ 0, !GetAZs "" ]
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true

  PublicSubnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref BookStoreVpc
      AvailabilityZone: !Select [ 1, !GetAZs "" ]
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true

  PrivateSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref BookStoreVpc
      AvailabilityZone: !Select [ 0, !GetAZs "" ]
      CidrBlock: 10.0.3.0/24

  PrivateSubnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref BookStoreVpc
      AvailabilityZone: !Select [ 1, !GetAZs "" ]
      CidrBlock: 10.0.4.0/24

  InternetGateway:
    Type: "AWS::EC2::InternetGateway"

  VpcGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId: !Ref BookStoreVpc
      InternetGatewayId: !Ref InternetGateway

  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NATGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  NATGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: !Ref BookStoreVpc

  RouteNATGateway:
    DependsOn: NATGateway
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NATGateway

  PublicRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref BookStoreVpc

  PrivateRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref BookStoreVpc

  PublicSubnet1RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnet1RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  MySubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupName: my-subnet-group2
      DBSubnetGroupDescription: My subnet group for RDS
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

  EC2SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId:
        Ref: BookStoreVpc
      GroupDescription: "Security group for EC2 instances"
      Tags:
        - Key: Name
          Value: EC2SecurityGroup

  EKSSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Security group for Amazon EKS cluster
      VpcId: !Ref BookStoreVpc
      Tags:
        - Key: Name
          Value: EKSSG

  #  RDSSecurityGroup:
  #    Type: 'AWS::EC2::SecurityGroup'
  #    Properties:
  #      GroupDescription: Security group for RDS MySQL instance
  #      VpcId: !Ref Vpc
  #      Tags:
  #        - Key: Name
  #          Value: RDSSecurityGroup

  # DB Security group
  DBEC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    #    DependsOn: EC2SecurityGroup
    Properties:
      VpcId:
        Ref: BookStoreVpc
      GroupDescription: Open database for access
      SecurityGroupEgress:
        - Description: Allow all outbound traffic
          IpProtocol: "-1"
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: tcp  # port 3306 opened to the ec2 instances.
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId:
            Ref: EC2SecurityGroup

  # Create an IAM role for the EKS worker nodes
#  EKSWorkerNodeRole:
#    Type: AWS::IAM::Role
#    Properties:
#      AssumeRolePolicyDocument:
#        Statement:
#          - Effect: Allow
#            Principal:
#              Service: ec2.amazonaws.com
#            Action: sts:AssumeRole
#        Version: "2012-10-17"
#      Path: /
#      ManagedPolicyArns:
#        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
#        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
#        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy

  ## EKS cluster
  EKSCluster:
    Type: 'AWS::EKS::Cluster'
    Properties:
      Name: book-store-eks-cluster
      RoleArn: !Ref LabRoleARN
#      Version: "1.18"    // 1.20 and 1.18 are not supported, let's go with default
      ResourcesVpcConfig:
        SecurityGroupIds:
          - !Ref EKSSecurityGroup
        SubnetIds:
          - !Ref PublicSubnet2
          - !Ref PublicSubnet1

  ## Node group with 4 nodes for the EKS cluster
#  MyNodeGroup:
#    Type: AWS::EKS::Nodegroup
#    Properties:
#      ClusterName: !Ref EKSCluster
#      NodeRole: !GetAtt EKSWorkerNodeRole.Arn
#      Subnets:
#        - !Ref PublicSubnet2
#        - !Ref PublicSubnet1
#      ScalingConfig:
#        DesiredSize: 4
#        MaxSize: 4
#        MinSize: 4
#      InstanceTypes:
#        - t2.micro


  EC2Inbound:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      IpProtocol: tcp
      FromPort: 9092
      ToPort: 9092
      SourceSecurityGroupId: !Ref EKSSecurityGroup
      GroupId:
        Fn::GetAtt:
          - EC2SecurityGroup
          - GroupId

#  RDSInbound:
#    Type: 'AWS::EC2::SecurityGroupIngress'
#    Properties:
#      IpProtocol: tcp
#      FromPort: 3306
#      ToPort: 3306
#      SourceSecurityGroupId: !Ref EKSSecurityGroup
#      GroupId:
#        Fn::GetAtt:
#          - RDSSecurityGroup
#          - GroupId

  EKSInbound:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      CidrIp: 0.0.0.0/0
      GroupId:
        Fn::GetAtt:
          - EKSSecurityGroup
          - GroupId

  # RDS Aurora cluster (MySQL)
  DatabaseCluster:
    Type: AWS::RDS::DBCluster
    Properties:
      Engine: aurora-mysql
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      BackupRetentionPeriod: '7'
      PreferredBackupWindow: 01:00-02:00
      PreferredMaintenanceWindow: mon:03:00-mon:04:00
      DBSubnetGroupName: !Ref MySubnetGroup
      VpcSecurityGroupIds:
        - !Ref DBEC2SecurityGroup
      StorageEncrypted: true

  DatabasePrimaryInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      Engine: aurora-mysql
      DBClusterIdentifier: !Ref "DatabaseCluster"
      DBInstanceClass: db.t3.small
      DBSubnetGroupName: !Ref MySubnetGroup
      PubliclyAccessible: false

  DatabaseReplicaInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      Engine: aurora-mysql
      DBClusterIdentifier: !Ref "DatabaseCluster"
      DBInstanceClass: db.t3.small
      DBSubnetGroupName: !Ref MySubnetGroup
      PubliclyAccessible: false

#  # RDS
#  RDSInstance:
#    Type: 'AWS::RDS::DBInstance'
#    Properties:
#      DBInstanceIdentifier: !Ref RDSInstanceName
#      DBInstanceClass: db.t2.micro
#      Engine: mysql
#      AllocatedStorage: 20
#      MasterUsername: !Ref RDSDBUsername
#      MasterUserPassword: !Ref RDSDBPassword
#      DBName: !Ref RDSDBName
#      VPCSecurityGroups:
#        - !Ref RDSSecurityGroup
#      DBSubnetGroupName: !Ref MySubnetGroup

Outputs:
  EKSClusterEndpoint:
    Description: Endpoint for EKS cluster 1
    Value: !GetAtt EKSCluster.Endpoint
  RDSInstanceEndpoint:
    Description: Endpoint for RDS MySQL primary instance
    Value: !GetAtt DatabaseCluster.Endpoint.Address
  #    Value: !GetAtt RDSInstance.Endpoint.Address



